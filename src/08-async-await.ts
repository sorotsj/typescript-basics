// 8. Async/Await and Promises - ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏≠‡∏∞‡∏ã‡∏¥‡∏á‡πÇ‡∏Ñ‡∏£‡∏ô‡∏±‡∏™
console.log("=== Async/Await and Promises ===");

// Basic Promise - ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
function createPromise(delay: number, value: string): Promise<string> {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (delay > 0) {
        resolve(`‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${value} ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å ${delay}ms`);
      } else {
        reject(new Error("Delay ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0"));
      }
    }, delay);
  });
}

// ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Promise ‡πÅ‡∏ö‡∏ö .then()
createPromise(1000, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà 1")
  .then(result => {
    console.log("Promise result:", result);
    return createPromise(500, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà 2");
  })
  .then(result => {
    console.log("Chained result:", result);
  })
  .catch(error => {
    console.error("Promise error:", error.message);
  });

// Async/Await Functions - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ö‡∏ö async/await
async function fetchUserData(userId: number): Promise<{id: number, name: string, email: string}> {
  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
  await delay(800);
  
  if (userId <= 0) {
    throw new Error("User ID ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0");
  }
  
  return {
    id: userId,
    name: `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId}`,
    email: `user${userId}@example.com`
  };
}

async function fetchUserPosts(userId: number): Promise<{id: number, title: string, content: string}[]> {
  await delay(600);
  
  return [
    { id: 1, title: "‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏£‡∏Å", content: "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏£‡∏Å" },
    { id: 2, title: "‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏≠‡∏á", content: "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏≠‡∏á" }
  ];
}

// Utility function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö delay
function delay(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ async/await ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
async function getUserWithPosts(userId: number): Promise<void> {
  try {
    console.log(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID: ${userId}...`);
    
    const user = await fetchUserData(userId);
    console.log("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:", user);
    
    console.log("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏û‡∏™‡∏ï‡πå...");
    const posts = await fetchUserPosts(userId);
    console.log("‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", posts);
    
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error instanceof Error ? error.message : String(error));
  }
}

// ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏´‡∏•‡∏≤‡∏¢ Promise ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
async function fetchMultipleUsers(): Promise<void> {
  try {
    console.log("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô...");
    
    // Promise.all - ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å Promise ‡πÄ‡∏™‡∏£‡πá‡∏à
    const users = await Promise.all([
      fetchUserData(1),
      fetchUserData(2),
      fetchUserData(3)
    ]);
    
    console.log("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", users);
    
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:", error instanceof Error ? error.message : String(error));
  }
}

// Promise.allSettled - ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å Promise ‡πÄ‡∏™‡∏£‡πá‡∏à (‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏∏‡∏î‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error)
async function fetchAllUsersSettled(): Promise<void> {
  console.log("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏° error)...");
  
  const results = await Promise.allSettled([
    fetchUserData(1),
    fetchUserData(-1), // ‡∏à‡∏∞ error
    fetchUserData(2),
    fetchUserData(0)   // ‡∏à‡∏∞ error
  ]);
  
  results.forEach((result, index) => {
    if (result.status === "fulfilled") {
      console.log(`‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${index + 1}:`, result.value);
    } else {
      console.log(`‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${index + 1}:`, result.reason.message);
    }
  });
}

// Promise.race - ‡πÉ‡∏ä‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á Promise ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
async function raceExample(): Promise<void> {
  console.log("‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô Promise...");
  
  try {
    const winner = await Promise.race([
      createPromise(1000, "‡∏ä‡πâ‡∏≤"),
      createPromise(500, "‡πÄ‡∏£‡πá‡∏ß"),
      createPromise(1500, "‡∏ä‡πâ‡∏≤‡∏°‡∏≤‡∏Å")
    ]);
    
    console.log("‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞:", winner);
  } catch (error) {
    console.error("Race error:", error instanceof Error ? error.message : String(error));
  }
}

// Generic Promise Functions
async function fetchData<T>(url: string, parser: (data: any) => T): Promise<T> {
  await delay(300);
  
  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á API response
  const mockData = {
    user: { id: 1, name: "‡∏™‡∏°‡∏ä‡∏≤‡∏¢" },
    product: { id: 1, name: "‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", price: 15000 },
    order: { id: 1, total: 25000, items: 2 }
  };
  
  const response = mockData[url as keyof typeof mockData];
  if (!response) {
    throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö URL: ${url}`);
  }
  
  return parser(response);
}

interface Product {
  id: number;
  name: string;
  price: number;
}

async function fetchProduct(): Promise<Product> {
  return fetchData<Product>("product", (data) => ({
    id: data.id,
    name: data.name,
    price: data.price
  }));
}

// Error Handling ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
async function advancedErrorHandling(): Promise<void> {
  // ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 1: try-catch ‡πÅ‡∏¢‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
  try {
    const user = await fetchUserData(1);
    console.log("‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", user.name);
    
    try {
      const posts = await fetchUserPosts(1);
      console.log(`‡∏û‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå ${posts.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    } catch (postsError) {
      console.log("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏î‡πâ:", postsError instanceof Error ? postsError.message : String(postsError));
      // ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
    }
    
  } catch (userError) {
    console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:", userError instanceof Error ? userError.message : String(userError));
    return; // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  }
  
  // ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ finally
  try {
    console.log("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...");
    await delay(500);
    console.log("‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à");
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
  } finally {
    console.log("‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£");
  }
}

// Timeout ‡πÅ‡∏•‡∏∞ Retry
async function fetchWithTimeout<T>(
  promise: Promise<T>, 
  timeoutMs: number
): Promise<T> {
  const timeoutPromise = new Promise<never>((_, reject) => {
    setTimeout(() => reject(new Error("Timeout")), timeoutMs);
  });
  
  return Promise.race([promise, timeoutPromise]);
}

async function retryOperation<T>(
  operation: () => Promise<T>,
  maxRetries: number = 3,
  delayMs: number = 1000
): Promise<T> {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await operation();
    } catch (error) {
      console.log(`‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${attempt} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:`, error instanceof Error ? error.message : String(error));
      
      if (attempt === maxRetries) {
        throw new Error(`‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° ${maxRetries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
      }
      
      await delay(delayMs);
    }
  }
  
  throw new Error("‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ");
}

// ‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï
async function demonstrateAsync(): Promise<void> {
  console.log("üî• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï Async/Await");
  
  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 1
  await getUserWithPosts(1);
  console.log("---");
  
  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 2
  await fetchMultipleUsers();
  console.log("---");
  
  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 3
  await fetchAllUsersSettled();
  console.log("---");
  
  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 4
  await raceExample();
  console.log("---");
  
  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 5
  try {
    const product = await fetchProduct();
    console.log("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:", product);
  } catch (error) {
    console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ:", error instanceof Error ? error.message : String(error));
  }
  console.log("---");
  
  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 6
  await advancedErrorHandling();
  console.log("---");
  
  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 7: Timeout
  try {
    const result = await fetchWithTimeout(
      createPromise(2000, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πâ‡∏≤"), 
      1000
    );
    console.log("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:", result);
  } catch (error) {
    console.log("Timeout ‡∏´‡∏£‡∏∑‡∏≠ error:", error instanceof Error ? error.message : String(error));
  }
  
  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 8: Retry
  try {
    let attemptCount = 0;
    const result = await retryOperation(async () => {
      attemptCount++;
      if (attemptCount < 3) {
        throw new Error("‡∏à‡∏≥‡∏•‡∏≠‡∏á error");
      }
      return "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 3";
    });
    console.log("Retry result:", result);
  } catch (error) {
    console.log("Retry failed:", error instanceof Error ? error.message : String(error));
  }
  
  console.log("üéâ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï Async/Await");
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï
demonstrateAsync();

export {
  createPromise, fetchUserData, fetchUserPosts,
  getUserWithPosts, fetchMultipleUsers,
  fetchData, fetchWithTimeout, retryOperation
};
